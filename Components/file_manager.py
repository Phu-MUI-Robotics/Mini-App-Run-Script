import streamlit as st
import pandas as pd
import base64
import os
import shutil
import zipfile
import io
from .config import BINARY_EXTENSIONS, LANGUAGE_MAP

class FileManager:
    
    #‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å temp directory ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    @staticmethod
    def get_files_from_temp_dir(temp_dir):
        if not temp_dir or not os.path.exists(temp_dir):
            return []
        
        files = []
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
        for file_name in os.listdir(temp_dir):
            file_path = os.path.join(temp_dir, file_name)
            if os.path.isfile(file_path):
                files.append(file_path)
            elif os.path.isdir(file_path):
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô radarPlot folder)
                for sub_file in os.listdir(file_path):
                    sub_file_path = os.path.join(file_path, sub_file)
                    if os.path.isfile(sub_file_path):
                        files.append(sub_file_path)
        
        return files

    #‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô temp directory ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    @staticmethod
    def cleanup_temp_dir(temp_dir):
        if temp_dir and os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir)
            except:
                pass

    #‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ZIP
    @staticmethod
    def create_zip_from_files(file_paths):
        zip_buffer = io.BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for file_path in file_paths:
                if os.path.exists(file_path):
                    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° path) ‡πÉ‡∏ô ZIP
                    arcname = os.path.basename(file_path)
                    zip_file.write(file_path, arcname)
        
        zip_buffer.seek(0)
        return zip_buffer.getvalue()

    #Func ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
    @staticmethod
    def clear_file_selection():
        st.session_state.clear_file_uploader = True
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° uploader_key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡πÉ‡∏´‡∏°‡πà
        st.session_state.uploader_key += 1
        st.rerun()

    #Func ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    @staticmethod
    def process_uploaded_file(uploaded_file, i, uploader_key):
        file_extension = uploaded_file.name.split('.')[-1].lower() if '.' in uploaded_file.name else 'unknown'
        
        if file_extension in BINARY_EXTENSIONS:
            FileManager._process_binary_file(uploaded_file, file_extension, i, uploader_key)
        else:
            FileManager._process_text_file(uploaded_file, file_extension, i, uploader_key)
    #‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå Binary
    @staticmethod
    def _process_binary_file(uploaded_file, file_extension, i, uploader_key):
        st.info(f"üìÅ **‡πÑ‡∏ü‡∏•‡πå Binary:** {uploaded_file.name} ({file_extension.upper()})")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Excel files
        if file_extension in ['xlsx', 'xls']:
            try:
                uploaded_file.seek(0)  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï pointer
                df = pd.read_excel(uploaded_file)
                st.markdown("**üëÅÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel:**")
                st.dataframe(df.head(10), use_container_width=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                col_info1, col_info2 = st.columns(2)
                with col_info1:
                    st.metric("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß", len(df))
                with col_info2:
                    st.metric("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå", len(df.columns))
                
                st.markdown("**üìã ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:**")
                st.write(", ".join(df.columns.tolist()))
                
            except Exception as e:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: {e}")
                st.warning("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Binary file ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ")
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Binary file ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå Binary ‡πÉ‡∏ô Memory
        if st.button("üíæ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Memory", type="secondary", key=f"save_binary_{i}_{uploader_key}"):
            uploaded_file.seek(0)  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï pointer ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô
            binary_content = base64.b64encode(uploaded_file.getvalue()).decode('utf-8')
            st.session_state.imported_files[uploaded_file.name] = f"__BINARY__{binary_content}"
            st.success(f"‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} (Binary) ‡πÉ‡∏ô Memory ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    #‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå Text
    @staticmethod
    def _process_text_file(uploaded_file, file_extension, i, uploader_key):
        try:
            content = uploaded_file.read().decode('utf-8')
            
            display_language = LANGUAGE_MAP.get(file_extension, 'text')
            
            st.markdown("**üëÅÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå:**")
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å
            preview_content = '\n'.join(content.split('\n')[:10])
            if len(content.split('\n')) > 10:
                preview_content += '\n... (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á 10 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å)'
            
            st.code(preview_content, language=display_language)
                
            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå Text ‡πÉ‡∏ô Memory
            if st.button("üíæ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Memory", type="secondary", key=f"save_text_{i}_{uploader_key}"):
                st.session_state.imported_files[uploaded_file.name] = content
                st.success(f"‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÉ‡∏ô Memory ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
        except UnicodeDecodeError:
            # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô text ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô Binary
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Binary file)")
            st.info(f"üìÅ **‡πÑ‡∏ü‡∏•‡πå Binary:** {uploaded_file.name} ({file_extension.upper()})")
            
            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå Binary ‡πÉ‡∏ô Memory
            if st.button("üíæ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Memory", type="secondary", key=f"save_binary_fallback_{i}_{uploader_key}"):
                uploaded_file.seek(0)
                binary_content = base64.b64encode(uploaded_file.getvalue()).decode('utf-8')
                st.session_state.imported_files[uploaded_file.name] = f"__BINARY__{binary_content}"
                st.success(f"‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} (Binary) ‡πÉ‡∏ô Memory ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")